name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20.x'

jobs:
  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --legacy-peer-deps

      - name: 🔍 Debug environment
        run: |
          echo "Node.js version: $(node --version)"
          echo "npm version: $(npm --version)"
          echo "Prettier version: $(npx prettier --version)"
          echo "Current directory: $(pwd)"
          echo "Files to check:"
          find src -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" -o -name "*.json" -o -name "*.css" -o -name "*.md" | head -10

      - name: 🎨 Check code formatting
        run: npm run format:ci

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 🔧 TypeScript type check
        run: npm run type-check

      - name: 🏗️ Build project
        run: npm run build

      - name: 🧪 Run tests
        run: npm run test

      # Безопасность
      - name: 🔒 Security audit
        run: npm audit --audit-level moderate
        continue-on-error: true

      # Анализ bundle size
      - name: 📊 Analyze bundle size
        run: |
          echo "## Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          if [ -d "dist" ]; then
            BUNDLE_SIZE=$(du -sh dist/ | cut -f1)
            echo "| Bundle Size | $BUNDLE_SIZE |" >> $GITHUB_STEP_SUMMARY
          
            # Подсчет файлов
            JS_FILES=$(find dist -name "*.js" | wc -l)
            CSS_FILES=$(find dist -name "*.css" | wc -l)
            echo "| JS Files | $JS_FILES |" >> $GITHUB_STEP_SUMMARY
            echo "| CSS Files | $CSS_FILES |" >> $GITHUB_STEP_SUMMARY
          fi

      # Сохранение артефактов сборки
      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  # Проверка Docker образа
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Build Docker image
        run: |
          docker build -t bugtracker:${{ github.sha }} .
          docker tag bugtracker:${{ github.sha }} bugtracker:latest

      - name: 🧪 Test Docker image
        run: |
          # Запуск контейнера в фоне
          docker run -d --name test-container -p 3000:3000 bugtracker:latest
          
          # Ждем запуска
          sleep 15
          
          # Проверяем доступность
          curl -f http://localhost:3000 || (docker logs test-container && exit 1)
          
          # Очистка
          docker stop test-container
          docker rm test-container

  # Уведомления о статусе
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [quality-checks, docker-build]
    if: always()

    steps:
      - name: 📊 Create status summary
        run: |
          echo "## 🚀 Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.quality-checks.result }}" = "success" ]; then
            echo "| Quality Checks | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Quality Checks | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.docker-build.result }}" = "success" ]; then
            echo "| Docker Build | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.docker-build.result }}" = "skipped" ]; then
            echo "| Docker Build | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Docker Build | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
